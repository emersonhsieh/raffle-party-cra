/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace RaffleParty {
  export type PoolPrizeTokenConfigStruct = {
    tokenAddress: string;
    weight: BigNumberish;
  };

  export type PoolPrizeTokenConfigStructOutput = [string, BigNumber] & {
    tokenAddress: string;
    weight: BigNumber;
  };
}

export interface RafflePartyInterface extends utils.Interface {
  functions: {
    "BASE_WEIGHT()": FunctionFragment;
    "addPoolPrize(uint256,address,uint96)": FunctionFragment;
    "baseRoyalty()": FunctionFragment;
    "blockNumberToIndex(address,uint256)": FunctionFragment;
    "buyTickets(uint256,uint96)": FunctionFragment;
    "buyTicketsEth(uint256,uint96)": FunctionFragment;
    "cancelRaffle(uint256)": FunctionFragment;
    "claimPrize(address,uint256,uint256,uint256)": FunctionFragment;
    "claimSales(address,uint256)": FunctionFragment;
    "createRaffle(address,uint96,address,uint48,uint48,uint256,uint96)": FunctionFragment;
    "getAccountTokenClaimAmount(address,uint256)": FunctionFragment;
    "getClaimableAmount(uint256)": FunctionFragment;
    "getMinimumSales(uint256)": FunctionFragment;
    "getPoolPrizeTokenConfig(uint256,address)": FunctionFragment;
    "getRoyaltyAmount(uint256)": FunctionFragment;
    "getTicketPurchaseIndex(uint256,uint256)": FunctionFragment;
    "getTotalSales(uint256)": FunctionFragment;
    "getWinner(uint256,uint256)": FunctionFragment;
    "getWinnerTicketId(uint256,uint256)": FunctionFragment;
    "initializeSeed(uint256)": FunctionFragment;
    "overflowRoyalty()": FunctionFragment;
    "owner()": FunctionFragment;
    "raffleAccountWeights(uint256,address)": FunctionFragment;
    "raffleCount()": FunctionFragment;
    "rafflePoolPrizeTokenConfigs(uint256,uint256)": FunctionFragment;
    "rafflePrizes(uint256,uint256)": FunctionFragment;
    "raffleTickets(uint256,uint256)": FunctionFragment;
    "raffles(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestIdToRaffleId(bytes32)": FunctionFragment;
    "royaltyPriceIndices(address,uint256)": FunctionFragment;
    "setBaseRoyalty(uint256)": FunctionFragment;
    "setOverflowRoyalty(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BASE_WEIGHT"
      | "addPoolPrize"
      | "baseRoyalty"
      | "blockNumberToIndex"
      | "buyTickets"
      | "buyTicketsEth"
      | "cancelRaffle"
      | "claimPrize"
      | "claimSales"
      | "createRaffle"
      | "getAccountTokenClaimAmount"
      | "getClaimableAmount"
      | "getMinimumSales"
      | "getPoolPrizeTokenConfig"
      | "getRoyaltyAmount"
      | "getTicketPurchaseIndex"
      | "getTotalSales"
      | "getWinner"
      | "getWinnerTicketId"
      | "initializeSeed"
      | "overflowRoyalty"
      | "owner"
      | "raffleAccountWeights"
      | "raffleCount"
      | "rafflePoolPrizeTokenConfigs"
      | "rafflePrizes"
      | "raffleTickets"
      | "raffles"
      | "renounceOwnership"
      | "requestIdToRaffleId"
      | "royaltyPriceIndices"
      | "setBaseRoyalty"
      | "setOverflowRoyalty"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BASE_WEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPoolPrize",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "baseRoyalty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blockNumberToIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTickets",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTicketsEth",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelRaffle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPrize",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimSales",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createRaffle",
    values: [
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountTokenClaimAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumSales",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolPrizeTokenConfig",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyaltyAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTicketPurchaseIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSales",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWinner",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWinnerTicketId",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeSeed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "overflowRoyalty",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "raffleAccountWeights",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "raffleCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rafflePoolPrizeTokenConfigs",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rafflePrizes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "raffleTickets",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "raffles",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestIdToRaffleId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyPriceIndices",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseRoyalty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOverflowRoyalty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASE_WEIGHT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPoolPrize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseRoyalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockNumberToIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyTickets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyTicketsEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelRaffle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimPrize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimSales", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createRaffle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountTokenClaimAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumSales",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolPrizeTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltyAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTicketPurchaseIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSales",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWinner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWinnerTicketId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeSeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "overflowRoyalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "raffleAccountWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raffleCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rafflePoolPrizeTokenConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rafflePrizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raffleTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "raffles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestIdToRaffleId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyPriceIndices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseRoyalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOverflowRoyalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RaffleParty extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RafflePartyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASE_WEIGHT(overrides?: CallOverrides): Promise<[BigNumber]>;

    addPoolPrize(
      raffleId: BigNumberish,
      prizeToken: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    baseRoyalty(overrides?: CallOverrides): Promise<[BigNumber]>;

    blockNumberToIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buyTickets(
      raffleId: BigNumberish,
      ticketCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyTicketsEth(
      raffleId: BigNumberish,
      ticketCount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelRaffle(
      raffleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimPrize(
      to: string,
      raffleId: BigNumberish,
      prizeIndex: BigNumberish,
      ticketPurchaseIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimSales(
      account: string,
      raffleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createRaffle(
      prizeToken: string,
      tokenId: BigNumberish,
      paymentToken: string,
      startTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      ticketPrice: BigNumberish,
      minTickets: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAccountTokenClaimAmount(
      account: string,
      raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    getClaimableAmount(
      raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { claimableAmount: BigNumber }>;

    getMinimumSales(
      raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { minimumSales: BigNumber }>;

    getPoolPrizeTokenConfig(
      raffleId: BigNumberish,
      prizeToken: string,
      overrides?: CallOverrides
    ): Promise<
      [RaffleParty.PoolPrizeTokenConfigStructOutput] & {
        config: RaffleParty.PoolPrizeTokenConfigStructOutput;
      }
    >;

    getRoyaltyAmount(
      raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { royaltyAmount: BigNumber }>;

    getTicketPurchaseIndex(
      raffleId: BigNumberish,
      ticketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ticketPurchaseIndex: BigNumber }>;

    getTotalSales(
      raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalSales: BigNumber }>;

    getWinner(
      raffleId: BigNumberish,
      prizeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { winner: string }>;

    getWinnerTicketId(
      raffleId: BigNumberish,
      prizeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ticketId: BigNumber }>;

    initializeSeed(
      raffleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    overflowRoyalty(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    raffleAccountWeights(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    raffleCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    rafflePoolPrizeTokenConfigs(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { tokenAddress: string; weight: BigNumber }
    >;

    rafflePrizes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber, boolean] & {
        tokenAddress: string;
        tokenId: BigNumber;
        owner: string;
        weight: BigNumber;
        claimed: boolean;
      }
    >;

    raffleTickets(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { owner: string; endId: BigNumber }>;

    raffles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber
      ] & {
        creator: string;
        ticketPrice: BigNumber;
        requestId: string;
        paymentToken: string;
        minTickets: BigNumber;
        seed: BigNumber;
        startTimestamp: number;
        endTimestamp: number;
        totalWeight: BigNumber;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestIdToRaffleId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    royaltyPriceIndices(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { blockNumber: number; value: BigNumber }>;

    setBaseRoyalty(
      _baseRoyalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOverflowRoyalty(
      _overflowRoyalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BASE_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

  addPoolPrize(
    raffleId: BigNumberish,
    prizeToken: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  baseRoyalty(overrides?: CallOverrides): Promise<BigNumber>;

  blockNumberToIndex(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyTickets(
    raffleId: BigNumberish,
    ticketCount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyTicketsEth(
    raffleId: BigNumberish,
    ticketCount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelRaffle(
    raffleId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimPrize(
    to: string,
    raffleId: BigNumberish,
    prizeIndex: BigNumberish,
    ticketPurchaseIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimSales(
    account: string,
    raffleId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createRaffle(
    prizeToken: string,
    tokenId: BigNumberish,
    paymentToken: string,
    startTimestamp: BigNumberish,
    endTimestamp: BigNumberish,
    ticketPrice: BigNumberish,
    minTickets: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAccountTokenClaimAmount(
    account: string,
    raffleId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getClaimableAmount(
    raffleId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinimumSales(
    raffleId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolPrizeTokenConfig(
    raffleId: BigNumberish,
    prizeToken: string,
    overrides?: CallOverrides
  ): Promise<RaffleParty.PoolPrizeTokenConfigStructOutput>;

  getRoyaltyAmount(
    raffleId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTicketPurchaseIndex(
    raffleId: BigNumberish,
    ticketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalSales(
    raffleId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWinner(
    raffleId: BigNumberish,
    prizeIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getWinnerTicketId(
    raffleId: BigNumberish,
    prizeIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initializeSeed(
    raffleId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  overflowRoyalty(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  raffleAccountWeights(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  raffleCount(overrides?: CallOverrides): Promise<BigNumber>;

  rafflePoolPrizeTokenConfigs(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { tokenAddress: string; weight: BigNumber }>;

  rafflePrizes(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, BigNumber, boolean] & {
      tokenAddress: string;
      tokenId: BigNumber;
      owner: string;
      weight: BigNumber;
      claimed: boolean;
    }
  >;

  raffleTickets(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { owner: string; endId: BigNumber }>;

  raffles(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      number,
      number,
      BigNumber
    ] & {
      creator: string;
      ticketPrice: BigNumber;
      requestId: string;
      paymentToken: string;
      minTickets: BigNumber;
      seed: BigNumber;
      startTimestamp: number;
      endTimestamp: number;
      totalWeight: BigNumber;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestIdToRaffleId(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  royaltyPriceIndices(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber] & { blockNumber: number; value: BigNumber }>;

  setBaseRoyalty(
    _baseRoyalty: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOverflowRoyalty(
    _overflowRoyalty: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASE_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    addPoolPrize(
      raffleId: BigNumberish,
      prizeToken: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    baseRoyalty(overrides?: CallOverrides): Promise<BigNumber>;

    blockNumberToIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyTickets(
      raffleId: BigNumberish,
      ticketCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyTicketsEth(
      raffleId: BigNumberish,
      ticketCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelRaffle(
      raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimPrize(
      to: string,
      raffleId: BigNumberish,
      prizeIndex: BigNumberish,
      ticketPurchaseIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimSales(
      account: string,
      raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createRaffle(
      prizeToken: string,
      tokenId: BigNumberish,
      paymentToken: string,
      startTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      ticketPrice: BigNumberish,
      minTickets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountTokenClaimAmount(
      account: string,
      raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimableAmount(
      raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumSales(
      raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolPrizeTokenConfig(
      raffleId: BigNumberish,
      prizeToken: string,
      overrides?: CallOverrides
    ): Promise<RaffleParty.PoolPrizeTokenConfigStructOutput>;

    getRoyaltyAmount(
      raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTicketPurchaseIndex(
      raffleId: BigNumberish,
      ticketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalSales(
      raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWinner(
      raffleId: BigNumberish,
      prizeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getWinnerTicketId(
      raffleId: BigNumberish,
      prizeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializeSeed(
      raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    overflowRoyalty(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    raffleAccountWeights(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    raffleCount(overrides?: CallOverrides): Promise<BigNumber>;

    rafflePoolPrizeTokenConfigs(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { tokenAddress: string; weight: BigNumber }
    >;

    rafflePrizes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber, boolean] & {
        tokenAddress: string;
        tokenId: BigNumber;
        owner: string;
        weight: BigNumber;
        claimed: boolean;
      }
    >;

    raffleTickets(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { owner: string; endId: BigNumber }>;

    raffles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber
      ] & {
        creator: string;
        ticketPrice: BigNumber;
        requestId: string;
        paymentToken: string;
        minTickets: BigNumber;
        seed: BigNumber;
        startTimestamp: number;
        endTimestamp: number;
        totalWeight: BigNumber;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestIdToRaffleId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    royaltyPriceIndices(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { blockNumber: number; value: BigNumber }>;

    setBaseRoyalty(
      _baseRoyalty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOverflowRoyalty(
      _overflowRoyalty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    BASE_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    addPoolPrize(
      raffleId: BigNumberish,
      prizeToken: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    baseRoyalty(overrides?: CallOverrides): Promise<BigNumber>;

    blockNumberToIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyTickets(
      raffleId: BigNumberish,
      ticketCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyTicketsEth(
      raffleId: BigNumberish,
      ticketCount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelRaffle(
      raffleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimPrize(
      to: string,
      raffleId: BigNumberish,
      prizeIndex: BigNumberish,
      ticketPurchaseIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimSales(
      account: string,
      raffleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createRaffle(
      prizeToken: string,
      tokenId: BigNumberish,
      paymentToken: string,
      startTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      ticketPrice: BigNumberish,
      minTickets: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAccountTokenClaimAmount(
      account: string,
      raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimableAmount(
      raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumSales(
      raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolPrizeTokenConfig(
      raffleId: BigNumberish,
      prizeToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoyaltyAmount(
      raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTicketPurchaseIndex(
      raffleId: BigNumberish,
      ticketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalSales(
      raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWinner(
      raffleId: BigNumberish,
      prizeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWinnerTicketId(
      raffleId: BigNumberish,
      prizeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializeSeed(
      raffleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    overflowRoyalty(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    raffleAccountWeights(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    raffleCount(overrides?: CallOverrides): Promise<BigNumber>;

    rafflePoolPrizeTokenConfigs(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rafflePrizes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    raffleTickets(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    raffles(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestIdToRaffleId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    royaltyPriceIndices(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBaseRoyalty(
      _baseRoyalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOverflowRoyalty(
      _overflowRoyalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE_WEIGHT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addPoolPrize(
      raffleId: BigNumberish,
      prizeToken: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    baseRoyalty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blockNumberToIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyTickets(
      raffleId: BigNumberish,
      ticketCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyTicketsEth(
      raffleId: BigNumberish,
      ticketCount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelRaffle(
      raffleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimPrize(
      to: string,
      raffleId: BigNumberish,
      prizeIndex: BigNumberish,
      ticketPurchaseIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimSales(
      account: string,
      raffleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createRaffle(
      prizeToken: string,
      tokenId: BigNumberish,
      paymentToken: string,
      startTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      ticketPrice: BigNumberish,
      minTickets: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAccountTokenClaimAmount(
      account: string,
      raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimableAmount(
      raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinimumSales(
      raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolPrizeTokenConfig(
      raffleId: BigNumberish,
      prizeToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoyaltyAmount(
      raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTicketPurchaseIndex(
      raffleId: BigNumberish,
      ticketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalSales(
      raffleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWinner(
      raffleId: BigNumberish,
      prizeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWinnerTicketId(
      raffleId: BigNumberish,
      prizeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializeSeed(
      raffleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    overflowRoyalty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    raffleAccountWeights(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    raffleCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rafflePoolPrizeTokenConfigs(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rafflePrizes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    raffleTickets(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    raffles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestIdToRaffleId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    royaltyPriceIndices(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBaseRoyalty(
      _baseRoyalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOverflowRoyalty(
      _overflowRoyalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
